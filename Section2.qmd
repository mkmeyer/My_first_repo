---
title: "R Objects, Workflow and Functions"
format: pdf
editor: visual
---

# Vectors

Create a vector

```{r}
set.seed(42)
my_unif <- runif(30)
is.vector(my_unif)
```

Subset that object

```{r}
my_unif[1:10]

my_unif[c(1:3, 15:17)]
```

Sort the vector

```{r}
sort(my_unif)
```

Create a vector with strings in it

```{r}
char_vec <- c('daf', "adf", "e2", '13da')
sort(char_vec)
```

# Data Frame

```{r}
data(trees)
trees
str(trees)
```

Subset a Column

```{r}
trees$Height
```

Get attributes from the data frame

```{r}
attributes(trees)
names(trees)
colnames(trees)[2:3]
```

# Lists

Investigating data frame from before

```{r}
is.list(trees)
is.data.frame(trees)
```

Can subset as a list

```{r}
trees[1]
trees[[1]]
```

Look at linear model fit

```{r}
fit <- lm(Volume ~ Height + Girth, data = trees)
```

Look at structure but restrict info

```{r}
str(fit, max.level = 1)
```

Some helper functions exist

```{r}
fit$coefficients
coef(fit)

#no helper function for rank: rank(fit)
```

# if/then/else

Fizz buzz challenge - take in a number - if it is divisible by 3 return fizz - if it is divisible by 5 return buzz - if it is divisible by 15 return fizz buzz

```{r}
number <- 2
if((number %% 15) == 0) {
  print("fizz buzz")
  } else if((number %% 5) == 0){
    print("buzz")
  } else if((number %% 3) == 0){
    print("fizz")
  } else {
    print("whoops?")
  }

#if(!(number %% 15))
```

# Loops

Wrap the fizz buzz code into a loop to check for multiple values.

```{r}
for(number in -1:41) {
  if((number %% 15) == 0) {
  print("fizz buzz")
  } else if((number %% 5) == 0){
    print("buzz")
  } else if((number %% 3) == 0){
    print("fizz")
  } else {
    print("whoops?")
  }
}

```

# Writing in R Functions

Normal approximation to the binomial

```{r}
n <- 40
prob <- 0.3

#probabilities from a binomial RV
dbinom(0:n, size = n, prob = prob)

#plot with plot
plot(0:n, dbinom(0:n, size = n, prob = prob), type = "h")

norm_x <- seq(from  = 0, to = n, length = 1000)
dnorm(norm_x, mean = n*prob, sd = sqrt(n*prob*(1-prob)))
lines(norm_x, dnorm(norm_x, mean = n*prob, sd = sqrt(n*prob*(1-prob))))
```

let's write a function to make this plot for any $n$ and $p$

```{r}
plot_norm_approx <- function(n, prob) {
  #plot with plot
  plot(0:n, dbinom(0:n, size = n, prob = prob), type = "h")
  
  norm_x <- seq(from  = 0, to = n, length = 1000)
  lines(norm_x, dnorm(norm_x, 
                      mean = n*prob, 
                      sd = sqrt(n*prob*(1-prob))))
}
```

Test it

```{r}
plot_norm_approx(30, 0.95)
```

Add some default values

```{r}
plot_norm_approx <- function(n = 30, prob = 0.5) {
  #plot with plot
  plot(0:n, dbinom(0:n, size = n, prob = prob), type = "h")
  
  norm_x <- seq(from  = 0, to = n, length = 1000)
  lines(norm_x, dnorm(norm_x, 
                      mean = n*prob, 
                      sd = sqrt(n*prob*(1-prob))))
}
```

Test it

```{r}
plot_norm_approx(prob = 0.1, 50)
```
